/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package latentsemanticindexing.control;

import Data.Data;
import UI.Dictionary;
import com.sun.javafx.geom.Vec2d;
import de.javasoft.plaf.synthetica.SyntheticaBlueLightLookAndFeel;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author quocn
 */
public class Documents extends javax.swing.JFrame {

    /**
     * Creates new form Documents
     */
    
    private static Documents instance = null;
    
    public Documents() throws Exception {
        initComponents();
        loadDocumentNames();
        StopWords.createStopWords();
    }
    
    public void loadDocumentNames() throws Exception{
        
        comboBoxNameDocument.removeAllItems();
        
        String sql = "select name_collection from information";
        
        ResultSet res = Data.getResultsetQuery(sql, "lsi");
        while(res.next()){
            comboBoxNameDocument.addItem(res.getString(1));
        }
        comboBoxNameDocument.addItem(Dictionary.Words.ADD_NEW_DOCUMENT.getString() + "...");
    }
    
    public static Documents getInstance() throws Exception{
        if(instance == null) instance = new Documents();
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        textName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaText = new javax.swing.JTextArea();
        buttonDone = new javax.swing.JButton();
        textConfirm = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboBoxNameDocument = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("DOCUMENT MANAGEMENT");

        textName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Name Document:");

        textAreaText.setColumns(20);
        textAreaText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        textAreaText.setRows(5);
        jScrollPane1.setViewportView(textAreaText);

        buttonDone.setText("DONE");
        buttonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDoneActionPerformed(evt);
            }
        });

        textConfirm.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonDone))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textName))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonDone)
                    .addComponent(textConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 392, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Remove", jPanel2);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Choose Document:");

        comboBoxNameDocument.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboBoxNameDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxNameDocumentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxNameDocument, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboBoxNameDocument, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDoneActionPerformed
        try {
            String name = textName.getText();
            String text = textAreaText.getText();
            addDocument(name, text);
            addTermWord(name, text);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_buttonDoneActionPerformed

    private void addDocument(String name, String text) throws Exception{
        boolean confirm = true;
        try{
            
            
            if(name.isEmpty() || text.isEmpty()){
                textConfirm.setText("Khong duoc bo trong");
                throw new Exception();
            }

            String sql = "INSERT INTO documents VALUES (null, '" 
                        + name + "', '" + text + "');";
            String collectionName = (String) comboBoxNameDocument.getSelectedItem();
            String databaseName = getDatabaseName(collectionName);
            Data.setResultsetUpdate(sql, databaseName );
        }catch(Exception ex){
            ex.printStackTrace();
            confirm = false;
            
        }finally{
            if(confirm){
                textConfirm.setForeground(Dictionary.COLOR.SUCCESSFUL.getColor());
                textConfirm.setText(Dictionary.Words.INSERT.getString() + " "
                        +Dictionary.Words.SUCCESSFUL.getString());

                clearComponent();
            }else{
                Toolkit.getDefaultToolkit().beep();
                textConfirm.setForeground(Dictionary.COLOR.FAIL.getColor());
                textConfirm.setText(Dictionary.Words.INSERT.getString() + " " 
                        +Dictionary.Words.FAIL.getString());
            }
        }
    }
    
    private String getDatabaseName(String collectionName){
        String sql = "select name_database from information where name_collection = '"
                + collectionName + "'";
        try{
            ResultSet res =  Data.getResultsetQuery(sql, "lsi");
            res.next();
            return res.getString(1);
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return null;
    }
    
    private void addTermWord(String name, String text) throws Exception{
        Vector listTermWord = RemoveStopWord.getList(text);
        HashMap map = new HashMap<String, Integer>();
        for(int i=0; i<listTermWord.size(); ++i){
            String word = (String) listTermWord.get(i);
            try {            
                checkWord(word);
            } catch (SQLException ex) {
                //ex.printStackTrace();
            }
            if(map.containsKey(word)){
                map.put(word, (int) map.get(word) + 1 );
            }else{
                map.put(word, 1 );
            }
        }
        String databaseName = getDatabaseName((String) comboBoxNameDocument.getSelectedItem());
        for (Object e:map.keySet()){
            Integer count = (Integer) map.get(e.toString());
            String idTermWord = getIDTermWord(e.toString(), databaseName);
            String idDocument = getIDDocument(name, databaseName);
            setNumber(idDocument, idTermWord , count, databaseName);
        }
    }
    
    private String getIDTermWord(String wordString, String databaseName) throws Exception{
        String sql = "select id from terms where word = '" + wordString + "'";
        
        ResultSet res = Data.getResultsetQuery(sql, databaseName);
        res.next();
        return res.getString(1);
    }
    
    private String getIDDocument(String nameString, String databaseName) throws Exception{
        String sql = "select id from documents where name = '" + nameString + "'";
        
        ResultSet res = Data.getResultsetQuery(sql, databaseName);
        res.next();
        return res.getString(1);
    }
    
    private String getIdTermWord(String word) throws Exception{
        String sql = "select id from terms where word = '" + word + "'";
        String databaseName = getDatabaseName((String) comboBoxNameDocument.getSelectedItem());
        try {
            ResultSet res = Data.getResultsetQuery(sql,databaseName );
            if(res.next()){
                return res.getString(1);
            }
            return "";
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
        return "";
    }
    
    private void setNumber(String idDocument, String idTerm, Integer count, String databaseName) throws SQLException{
        String sql = "insert into term_document(id_term, id_document, count) value ('"
                + idTerm + "','" + idDocument + "','" + count + "')";
        
        Data.setResultsetUpdate(sql, databaseName);
    }
    
    private void checkWord(String word) throws SQLException{
        String sql = "select top 1 word from terms";
        ResultSet res;
        try {
            res = Data.getResultsetQuery(sql, comboBoxNameDocument.getSelectedItem().toString());
            if(res.next()){
                return;
            }
        } catch (Exception ex) {
            sql = "INSERT INTO terms VALUES (null, '" + word + "')";
            Data.setResultsetUpdate(sql, comboBoxNameDocument.getSelectedItem().toString());
            //ex.printStackTrace();
        }
        
    }
    
    private void comboBoxNameDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxNameDocumentActionPerformed
        // TODO add your handling code here:
        if(comboBoxNameDocument.getSelectedIndex() == comboBoxNameDocument.getItemCount() - 1 
                && comboBoxNameDocument.getSelectedIndex() > 0){
                AddNewCollection.getIntance(comboBoxNameDocument).setVisible(true);
        }
    }//GEN-LAST:event_comboBoxNameDocumentActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new SyntheticaBlueLightLookAndFeel());
        } catch (ParseException | UnsupportedLookAndFeelException ex) {
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Documents().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Documents.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDone;
    private javax.swing.JComboBox<String> comboBoxNameDocument;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea textAreaText;
    private javax.swing.JLabel textConfirm;
    private javax.swing.JTextField textName;
    // End of variables declaration//GEN-END:variables

    private void clearComponent() {
        textAreaText.setText("");
        textName.setText("");
    }
}
